import {NextPage, InferGetStaticPropsType } from "next";
import {useRouter} from "next/router";
import ErrorPage from "next/error";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { getAllPosts, getPostBySlug, getPostSlugs } from "../lib/api";
import markdownToHtml from "../lib/markdownToHtml";

type Props = InferGetStaticPropsType<typeof getStaticProps>;

export const getStaticPaths = async () => {
    const posts = getAllPosts(["slug"]);
    
    return {
        paths: posts.map((post) => {
            return {
                params: {
                    slug: post.slug,
                },
            };
        }),
        fallback: false,
    };
};

export const getStaticProps = async ({ params }: any) => {
    const post = getPostBySlug(params.slug, ["slug", "title", "date", "content"]);
    const content = await markdownToHtml(post.content);

    return {
        props: {
            post: {
                ...post,
                content,
            },
        },
    };
};

const Post: NextPage<Props> = ({ post }) => {
    const router = useRouter();
    if (!router.isFallback && !post?.slug) {
        return <ErrorPage statusCode={404} />;
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Hello world!</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            <main className={styles.main}>
                <article>
                    <h1 className={styles.title}>{post.title}</h1>
                    <div className={styles.grid}>
                        <div>
                            <p>{post.date}</p>
                            <div dangerouslySetInnerHTML={{ __html: post.content }} />
                        </div>
                    </div>
                </article>
            </main>
            <footer className={styles.footer}>
                <p>Powered by Next.js</p>
            </footer>
        </div>
    );
};

export default Post;
